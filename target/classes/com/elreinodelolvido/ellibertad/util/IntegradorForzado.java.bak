package com.novelator.autogen.util;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;

public class IntegradorForzado {

    public static void main(String[] args) {
        System.out.println("‚öì Iniciando integraci√≥n forzada de refactors...");

        Path refactorRoot = Paths.get("autogen-output/refactor");
        if (!Files.exists(refactorRoot)) {
            System.out.println("‚ùå No se encontr√≥ la carpeta de refactors.");
            return;
        }

        try {
            Files.walk(refactorRoot)
                .filter(p -> p.toString().endsWith(".refactor.java"))
                .forEach(IntegradorForzado::integrarArchivo);
        } catch (IOException e) {
            System.err.println("üí• Error escaneando refactors:");
            e.printStackTrace();
        }

        System.out.println("‚úÖ Integraci√≥n forzada completada.");
    }

    private static void integrarArchivo(Path refactorPath) {
        try {
            // Obtener ruta relativa dentro de refactor/
            Path relative = Paths.get("autogen-output/refactor").relativize(refactorPath);
            String classPath = relative.toString().replace(".refactor.java", ".java");

            Path originalPath = Paths.get("src").resolve(classPath);
            Path backupPath = Paths.get(originalPath + ".bak");

            if (!Files.exists(originalPath)) {
                System.err.println("‚ùå Clase original no encontrada: " + originalPath);
                return;
            }

            // Backup primero
            Files.copy(originalPath, backupPath, StandardCopyOption.REPLACE_EXISTING);
            // Sustituir original por refactor
            Files.copy(refactorPath, originalPath, StandardCopyOption.REPLACE_EXISTING);

            System.out.println("‚úÖ Integrado: " + classPath);

        } catch (Exception e) {
            System.err.println("üí• Error integrando: " + refactorPath);
            e.printStackTrace();
        }
    }
}