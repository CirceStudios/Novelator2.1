package com.elreinodelolvido.ellibertad.debates;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

import com.elreinodelolvido.ellibertad.api.OraculoTecnico;
import com.elreinodelolvido.ellibertad.engine.Bitacora;
import com.elreinodelolvido.ellibertad.scanner.IntegradorForzado;
import com.elreinodelolvido.ellibertad.util.FileUtils;
import com.elreinodelolvido.ellibertad.util.GeneradorClasesNuevas;
import com.elreinodelolvido.ellibertad.util.ValidadorFirmas;

/**
 * üß© FUSOR DE DEBATES AUT√ìNOMO
 * Fundidor de Voluntades ‚Äì traduce los debates en planes de acci√≥n sobre el c√≥digo.
 */
public class FusorDeDebatesAutonomo {

    private final OraculoTecnico oraculo;
    private final Bitacora bitacora;
    private final GeneradorClasesNuevas generador;
    private final IntegradorForzado integrador;
    private final ValidadorFirmas validador;

    // Configuraci√≥n para mostrar por consola
    private boolean mostrarPorConsola = true;

    public FusorDeDebatesAutonomo(
            OraculoTecnico oraculo,
            Bitacora bitacora,
            GeneradorClasesNuevas generador,
            IntegradorForzado integrador,
            ValidadorFirmas validador) {
        this.oraculo = oraculo;
        this.bitacora = bitacora;
        this.generador = generador;
        this.integrador = integrador;
        this.validador = validador;
    }

    /**
     * üåä Punto de entrada: fusionar sabidur√≠a colectiva en un plan de evoluci√≥n.
     */
    public void fusionarSabiduriaColectiva() {
        bitacora.info("[üß©FUSOR] Iniciando fusi√≥n mejorada...");
        imprimirConsola("üöÄ INICIANDO FUSI√ìN DE DEBATES AUT√ìNOMOS");
        imprimirConsola("==========================================");
        
        try {
            List<File> debates = FileUtils.listFilesTurbo("autogen-output/debates", ".md", false)
                    .stream().map(File::new).collect(Collectors.toList());
            
            if (debates.isEmpty()) {
                bitacora.warn("[üß©FUSOR] No hay debates para fusionar.");
                imprimirConsola("‚ùå No se encontraron debates para fusionar en: autogen-output/debates/");
                return;
            }

            imprimirConsola("üìÅ Debates encontrados: " + debates.size());
            for (File debate : debates) {
                imprimirConsola("   - " + debate.getName());
            }
            imprimirConsola("");

            List<String> conclusiones = new ArrayList<>();
            for (File debate : debates) {
                bitacora.info("[üß©FUSOR] Analizando " + debate.getName());
                imprimirConsola("üîç Analizando debate: " + debate.getName());
                List<String> conclusionesDebate = analizarConclusionesDebate(debate);
                conclusiones.addAll(conclusionesDebate);
                imprimirConsola("   Conclusiones extra√≠das: " + conclusionesDebate.size());
            }

            if (conclusiones.isEmpty()) {
                bitacora.warn("[üß©FUSOR] No se extrajo ninguna conclusi√≥n t√©cnica.");
                imprimirConsola("‚ùå No se pudieron extraer conclusiones t√©cnicas de los debates.");
                return;
            }

            imprimirConsola("");
            imprimirConsola("üìä CONCLUSIONES EXTRA√çDAS:");
            imprimirConsola("----------------------------");
            for (int i = 0; i < conclusiones.size(); i++) {
                imprimirConsola((i + 1) + ". " + conclusiones.get(i));
            }
            imprimirConsola("");

            // üéØ PROMPT MEJORADO - SOLO TEXTO
            imprimirConsola("üß† CONSULTANDO AL OR√ÅCULO T√âCNICO...");
            String promptMejorado = construirPromptParaPlan(conclusiones);
            String respuesta = oraculo.invocar(promptMejorado, "fusor_plan_autonomo", 0.6);

            // üéØ GUARDAR RESPUESTA CRUDA
            FileUtils.writeToFile("autogen-output/debug/respuesta-fusor-cruda.txt", respuesta);
            
            // üéØ MOSTRAR RESPUESTA DEL OR√ÅCULO POR CONSOLA
            imprimirConsola("‚úÖ RESPUESTA DEL OR√ÅCULO RECIBIDA");
            imprimirConsola("=================================");
            imprimirConsola(respuesta);
            imprimirConsola("=================================");
            imprimirConsola("");
            
            // üéØ PROCESAR SOLO TEXTO (NO C√ìDIGO)
            imprimirConsola("üîÑ PROCESANDO RESPUESTA PARA GENERAR PLAN...");
            String planPath = generarPlanDesdeRespuestaTexto(respuesta);
            
            if (planPath != null && !planPath.contains("fallback")) {
                bitacora.info("[üß©FUSOR] Plan generado exitosamente: " + planPath);
                imprimirConsola("‚úÖ PLAN GENERADO EXITOSAMENTE: " + planPath);
                
                // üéØ MOSTRAR CONTENIDO DEL PLAN POR CONSOLA
                mostrarContenidoDelPlan(planPath);
                
                ejecutarIntegracion(planPath);
            } else {
                bitacora.warn("[üß©FUSOR] Usando plan fallback, integraci√≥n limitada");
                imprimirConsola("‚ö†Ô∏è  USANDO PLAN DE RESERVA (FALLBACK)");
            }
            
            registrarCronicaFusion(conclusiones);

        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] üí• Error en fusi√≥n", e);
            imprimirConsola("üí• ERROR DURANTE LA FUSI√ìN: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * üìÑ MOSTRAR CONTENIDO DEL PLAN POR CONSOLA
     */
    private void mostrarContenidoDelPlan(String planPath) {
        try {
            imprimirConsola("");
            imprimirConsola("üìã CONTENIDO DEL PLAN GENERADO:");
            imprimirConsola("================================");
            
            String contenido = FileUtils.readFile(planPath);
            if (contenido != null) {
                imprimirConsola(contenido);
            } else {
                imprimirConsola("No se pudo leer el contenido del plan: " + planPath);
            }
            
            imprimirConsola("================================");
            imprimirConsola("");
            
        } catch (Exception e) {
            imprimirConsola("‚ùå Error mostrando contenido del plan: " + e.getMessage());
        }
    }

    /**
     * üñ®Ô∏è M√âTODO PARA IMPRIMIR EN CONSOLA
     */
    private void imprimirConsola(String mensaje) {
        if (mostrarPorConsola) {
            System.out.println(mensaje);
        }
    }

    /**
     * üñ®Ô∏è M√âTODO PARA IMPRIMIR SEPARADOR EN CONSOLA
     */
    private void imprimirSeparadorConsola() {
        if (mostrarPorConsola) {
            System.out.println("--------------------------------------------------");
        }
    }
    
    /**
     * üéØ GENERAR PLAN DESDE RESPUESTA DE TEXTO - Ignora c√≥digo Java
     */
    private String generarPlanDesdeRespuestaTexto(String respuesta) {
        try {
            imprimirConsola("üîß Procesando respuesta para generar plan...");
            imprimirConsola("   Longitud de respuesta: " + (respuesta != null ? respuesta.length() + " caracteres" : "null"));
            
            if (respuesta == null || respuesta.trim().isEmpty()) {
                bitacora.warn("[üß©FUSOR] Respuesta vac√≠a o nula");
                imprimirConsola("‚ùå Respuesta vac√≠a o nula - generando plan de reserva");
                return generarPlanFallback();
            }
            
            // üéØ EXTRAER SOLO TEXTO - ELIMINAR C√ìDIGO JAVA
            imprimirConsola("   Eliminando c√≥digo Java...");
            String textoSinCodigo = eliminarCodigoJava(respuesta);
            imprimirConsola("   Texto limpio: " + textoSinCodigo.length() + " caracteres");
            
            // üéØ BUSCAR CONTENIDO ESTRUCTURADO EN TEXTO
            imprimirConsola("   Analizando estructura del texto...");
            if (contienePlanEstructurado(textoSinCodigo)) {
                imprimirConsola("   ‚úÖ Texto con estructura detectada - generando plan estructurado");
                return guardarPlanTextoEstructurado(textoSinCodigo);
            } else {
                imprimirConsola("   ‚ÑπÔ∏è  Texto sin estructura clara - generando plan simple");
                return guardarPlanTextoSimple(textoSinCodigo);
            }
            
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] Error generando plan desde texto", e);
            imprimirConsola("üí• Error generando plan: " + e.getMessage());
            return generarPlanFallback();
        }
    }

    /**
     * üö´ ELIMINAR C√ìDIGO JAVA - Filtra bloques de c√≥digo Java
     */
    private String eliminarCodigoJava(String contenido) {
        if (contenido == null) return "";
        
        imprimirConsola("   üö´ Filtrando c√≥digo Java...");
        
        // üéØ PATRONES PARA BLOQUES DE C√ìDIGO JAVA
        String resultado = contenido;
        
        // üéØ ELIMINAR BLOQUES DE C√ìDIGO COMPLETOS
        resultado = resultado.replaceAll("```java\\s*[\\s\\S]*?```", "");
        resultado = resultado.replaceAll("```\\s*[\\s\\S]*?```", "");
        
        // üéØ ELIMINAR L√çNEAS DE C√ìDIGO SUELTAS
        String[] lineas = resultado.split("\n");
        StringBuilder textoLimpio = new StringBuilder();
        
        int lineasCodigoEliminadas = 0;
        int lineasTextoMantenidas = 0;
        
        for (String linea : lineas) {
            String lineaTrim = linea.trim();
            boolean esCodigo = false;
            
            // üéØ DETECTAR SI ES L√çNEA DE C√ìDIGO
            if (lineaTrim.startsWith("package ") || 
                lineaTrim.startsWith("import ") ||
                lineaTrim.startsWith("public class ") ||
                lineaTrim.startsWith("private ") ||
                lineaTrim.startsWith("public ") ||
                lineaTrim.startsWith("protected ") ||
                lineaTrim.startsWith("@") ||
                (lineaTrim.contains("{") && lineaTrim.contains("}") && 
                 (lineaTrim.contains("(") || lineaTrim.contains(")"))) ||
                lineaTrim.endsWith(";")) {
                esCodigo = true;
                lineasCodigoEliminadas++;
            }
            
            if (!esCodigo && !lineaTrim.isEmpty()) {
                textoLimpio.append(linea).append("\n");
                lineasTextoMantenidas++;
            }
        }
        
        imprimirConsola("   üìä Estad√≠sticas filtrado: " + lineasCodigoEliminadas + " l√≠neas c√≥digo eliminadas, " + 
                       lineasTextoMantenidas + " l√≠neas texto mantenidas");
        
        return textoLimpio.toString().trim();
    }

    /**
     * üîç DETECTAR SI CONTIENE PLAN ESTRUCTURADO
     */
    private boolean contienePlanEstructurado(String texto) {
        if (texto == null) return false;
        
        String[] indicadoresEstructura = {
            "FASE", "PASO", "OBJETIVO", "PRIORIDAD", "IMPLEMENTAR", 
            "DESARROLLAR", "CREAR", "MODIFICAR", "OPTIMIZAR"
        };
        
        String textoUpper = texto.toUpperCase();
        int contadorIndicadores = 0;
        
        for (String indicador : indicadoresEstructura) {
            if (textoUpper.contains(indicador)) {
                contadorIndicadores++;
            }
        }
        
        boolean tieneEstructura = contadorIndicadores >= 3; // M√≠nimo 3 indicadores de estructura
        imprimirConsola("   üîç Indicadores de estructura encontrados: " + contadorIndicadores + "/" + indicadoresEstructura.length);
        
        return tieneEstructura;
    }

    /**
     * üíæ GUARDAR PLAN TEXTO ESTRUCTURADO
     */
    private String guardarPlanTextoEstructurado(String texto) {
        try {
            String planDir = "autogen-output/planes";
            FileUtils.crearDirectorioSiNoExiste(planDir);
            
            String timestamp = String.valueOf(System.currentTimeMillis());
            String planPath = planDir + "/plan_estructurado_" + timestamp + ".txt";
            
            String contenidoEstructurado = construirPlanEstructurado(texto);
            FileUtils.writeToFile(planPath, contenidoEstructurado);
            
            bitacora.info("[üß©FUSOR] Plan estructurado guardado: " + planPath);
            imprimirConsola("   üíæ Plan estructurado guardado en: " + planPath);
            
            return planPath;
            
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] Error guardando plan estructurado", e);
            imprimirConsola("   ‚ùå Error guardando plan estructurado: " + e.getMessage());
            return guardarPlanTextoSimple(texto);
        }
    }

    /**
     * üìù CONSTRUIR PLAN ESTRUCTURADO DESDE TEXTO
     */
    private String construirPlanEstructurado(String texto) {
        StringBuilder plan = new StringBuilder();
        
        plan.append("# üè¥‚Äç‚ò†Ô∏è PLAN DE ACTUALIZACI√ìN - TEXTO ESTRUCTURADO\n\n");
        plan.append("**Generado**: ").append(new Date()).append("\n\n");
        plan.append("## üìã AN√ÅLISIS DEL TEXTO\n\n");
        
        // üéØ EXTRAER OBJETIVOS PRINCIPALES
        List<String> objetivos = extraerObjetivos(texto);
        if (!objetivos.isEmpty()) {
            plan.append("### üéØ OBJETIVOS PRINCIPALES\n\n");
            for (String objetivo : objetivos) {
                plan.append("- ").append(objetivo).append("\n");
            }
            plan.append("\n");
        }
        
        // üéØ EXTRAER ACCIONES CONCRETAS
        List<String> acciones = extraerAcciones(texto);
        if (!acciones.isEmpty()) {
            plan.append("### üîß ACCIONES IDENTIFICADAS\n\n");
            for (String accion : acciones) {
                plan.append("- ").append(accion).append("\n");
            }
            plan.append("\n");
        }
        
        // üéØ CONTENIDO ORIGINAL (LIMPIADO)
        plan.append("## üìù CONTENIDO ORIGINAL PROCESADO\n\n");
        plan.append(texto).append("\n\n");
        
        // üéØ PLAN DE EJECUCI√ìN
        plan.append("## üöÄ PLAN DE EJECUCI√ìN\n\n");
        plan.append("1. **An√°lisis de requisitos** - Validar objetivos identificados\n");
        plan.append("2. **Dise√±o de soluci√≥n** - Elaborar arquitectura basada en texto\n");
        plan.append("3. **Implementaci√≥n** - Desarrollar seg√∫n especificaciones\n");
        plan.append("4. **Pruebas** - Validar funcionalidad\n");
        plan.append("5. **Integraci√≥n** - Incorporar al sistema\n\n");
        
        plan.append("**Nota**: Este plan se gener√≥ autom√°ticamente desde an√°lisis de texto.\n");
        
        return plan.toString();
    }

    /**
     * üéØ EXTRAER OBJETIVOS DEL TEXTO
     */
    private List<String> extraerObjetivos(String texto) {
        List<String> objetivos = new ArrayList<>();
        String[] lineas = texto.split("\n");
        
        for (String linea : lineas) {
            String lineaLower = linea.toLowerCase();
            if (lineaLower.contains("objetivo") || 
                lineaLower.contains("objetivos") ||
                lineaLower.contains("meta") ||
                lineaLower.contains("prop√≥sito") ||
                lineaLower.contains("finalidad")) {
                
                String objetivoLimpio = linea.trim()
                    .replace("OBJETIVO:", "")
                    .replace("Objetivo:", "")
                    .replace("OBJETIVOS:", "")
                    .replace("Objetivos:", "")
                    .replace("META:", "")
                    .replace("Meta:", "")
                    .trim();
                
                if (!objetivoLimpio.isEmpty() && objetivoLimpio.length() > 10) {
                    objetivos.add(objetivoLimpio);
                }
            }
        }
        
        // üéØ FALLBACK: USAR PRIMERAS L√çNEAS COMO OBJETIVOS
        if (objetivos.isEmpty() && lineas.length > 0) {
            for (int i = 0; i < Math.min(3, lineas.length); i++) {
                if (lineas[i].length() > 20) {
                    objetivos.add(lineas[i].trim());
                }
            }
        }
        
        imprimirConsola("   üéØ Objetivos extra√≠dos: " + objetivos.size());
        return objetivos;
    }

    /**
     * üîß EXTRAER ACCIONES DEL TEXTO
     */
    private List<String> extraerAcciones(String texto) {
        List<String> acciones = new ArrayList<>();
        String[] lineas = texto.split("\n");
        
        String[] verbosAccion = {
            "implementar", "desarrollar", "crear", "modificar", "optimizar",
            "mejorar", "agregar", "eliminar", "cambiar", "actualizar",
            "integrar", "refactorizar", "revisar", "corregir", "solucionar"
        };
        
        for (String linea : lineas) {
            String lineaLower = linea.toLowerCase();
            for (String verbo : verbosAccion) {
                if (lineaLower.contains(verbo) && linea.length() > 15) {
                    String accionLimpia = linea.trim();
                    if (!acciones.contains(accionLimpia)) {
                        acciones.add(accionLimpia);
                    }
                    break;
                }
            }
        }
        
        imprimirConsola("   üîß Acciones identificadas: " + acciones.size());
        return acciones;
    }

    /**
     * üíæ GUARDAR PLAN TEXTO SIMPLE
     */
    private String guardarPlanTextoSimple(String texto) {
        try {
            String planDir = "autogen-output/planes";
            FileUtils.crearDirectorioSiNoExiste(planDir);
            
            String timestamp = String.valueOf(System.currentTimeMillis());
            String planPath = planDir + "/plan_texto_" + timestamp + ".txt";
            
            String contenido = "# üìù PLAN DE TEXTO AUT√ìNOMO\n\n" +
                              "**Generado**: " + new Date() + "\n\n" +
                              "## üìã CONTENIDO ANALIZADO:\n\n" + texto +
                              "\n\n## üí° NOTA:\nEste plan se gener√≥ desde an√°lisis textual sin procesamiento de c√≥digo Java.";
            
            FileUtils.writeToFile(planPath, contenido);
            bitacora.info("[üß©FUSOR] Plan de texto simple guardado: " + planPath);
            imprimirConsola("   üíæ Plan simple guardado en: " + planPath);
            
            return planPath;
            
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] Error guardando plan de texto simple", e);
            imprimirConsola("   ‚ùå Error guardando plan simple: " + e.getMessage());
            return generarPlanFallback();
        }
    }

    /**
     * üÜò GENERAR PLAN FALLBACK - Cuando todo falla
     */
    private String generarPlanFallback() {
        try {
            String planDir = "autogen-output/planes";
            FileUtils.crearDirectorioSiNoExiste(planDir);
            
            String fallbackPath = planDir + "/plan_fallback_" + System.currentTimeMillis() + ".txt";
            
            String planFallback = """
                PLAN DE ACTUALIZACI√ìN FALLBACK - TEXTO
                
                OBJETIVO: Implementar mejoras cr√≠ticas detectadas en debates
                
                ACCIONES IDENTIFICADAS:
                - Optimizar sistema de procesamiento de texto
                - Implementar an√°lisis sem√°ntico mejorado
                - Mejorar extracci√≥n de conclusiones t√©cnicas
                - Refinar generaci√≥n de planes basados en texto
                
                PASOS PRIORITARIOS:
                1. Analizar estructura del texto recibido
                2. Identificar patrones y objetivos
                3. Elaborar plan de acci√≥n textual
                4. Ejecutar integraci√≥n basada en texto
                
                GENERADO: %s
                NOTA: Plan fallback activado - procesamiento solo de texto
                """.formatted(new Date());
            
            FileUtils.writeToFile(fallbackPath, planFallback);
            bitacora.warn("[üß©FUSOR] Usando plan fallback de texto: " + fallbackPath);
            imprimirConsola("   ‚ö†Ô∏è  Plan de reserva generado: " + fallbackPath);
            
            return fallbackPath;
            
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] Error cr√≠tico en plan fallback", e);
            imprimirConsola("   üí• Error cr√≠tico generando plan de reserva");
            return "autogen-output/planes/plan_emergencia.txt";
        }
    }

    /**
     * üéØ CONSTRUIR PROMPT ESPEC√çFICO PARA TEXTO (NO C√ìDIGO)
     */
    private String construirPromptParaPlan(List<String> conclusiones) {
        return """
            ANALIZA estas conclusiones t√©cnicas de debates y genera un PLAN DE ACCI√ìN en TEXTO DESCRIPTIVO:
            
            CONCLUSIONES:
            %s
            
            FORMATO REQUERIDO:
            - SOLO TEXTO DESCRIPTIVO, NO C√ìDIGO JAVA
            - Describe objetivos, fases y acciones en lenguaje natural
            - Enf√≥cate en la arquitectura y funcionalidad, no en implementaci√≥n espec√≠fica
            - Usa espa√±ol claro y t√©cnico
            - Estructura en secciones l√≥gicas pero sin formato JSON estricto
            
            EJEMPLO DE FORMATO:
            OBJETIVO PRINCIPAL: [descripci√≥n del objetivo]
            
            FASES DE IMPLEMENTACI√ìN:
            FASE 1: [nombre] - [descripci√≥n]
            FASE 2: [nombre] - [descripci√≥n]
            
            ACCIONES CONCRETAS:
            - [acci√≥n espec√≠fica]
            - [acci√≥n espec√≠fica]
            
            PRIORIDADES:
            [lista de prioridades]
            
            IMPORTANTE: NO incluyas c√≥digo Java, solo texto descriptivo.
            """.formatted(String.join("\n", conclusiones));
    }

    /**
     * üìú Lee un debate y extrae secciones con conclusiones o recomendaciones.
     */
    private List<String> analizarConclusionesDebate(File archivo) throws IOException {
        List<String> conclusiones = new ArrayList<>();
        String texto = FileUtils.readFile(archivo.getAbsolutePath());
        if (texto == null) return conclusiones;
        Arrays.stream(texto.split("\n"))
                .filter(l -> l.startsWith("üìä") || l.startsWith("üéØ") || l.startsWith("üîß") || l.startsWith("üöÄ"))
                .forEach(conclusiones::add);
        return conclusiones;
    }

    /**
     * ‚öôÔ∏è Ejecuta el ciclo de integraci√≥n: generaci√≥n ‚Üí integraci√≥n ‚Üí validaci√≥n.
     */
    private void ejecutarIntegracion(String planPath) {
        if (planPath == null) return;
        try {
            imprimirConsola("");
            imprimirConsola("‚öôÔ∏è  INICIANDO INTEGRACI√ìN DEL PLAN...");
            bitacora.info("[üß©FUSOR] Ejecutando integraci√≥n de plan textual...");
            
            // El generador ahora trabajar√° con planes de texto en lugar de c√≥digo
            generador.generarDesdePlan(planPath);
            imprimirConsola("   ‚úÖ Generaci√≥n desde plan completada");
            
            integrador.integrarTodo();
            imprimirConsola("   ‚úÖ Integraci√≥n completada");
            
            validador.validarFirmas();
            imprimirConsola("   ‚úÖ Validaci√≥n de firmas completada");
            
            bitacora.info("[üß©FUSOR] ‚úÖ Integraci√≥n de texto completada.");
            imprimirConsola("üéâ INTEGRACI√ìN COMPLETADA EXITOSAMENTE");
            
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] üí• Error durante integraci√≥n textual", e);
            imprimirConsola("üí• ERROR DURANTE LA INTEGRACI√ìN: " + e.getMessage());
        }
    }

    /**
     * üè¥‚Äç‚ò†Ô∏è Registra un cap√≠tulo en la bit√°cora pirata.
     */
    private void registrarCronicaFusion(List<String> conclusiones) {
        try {
            StringBuilder cap = new StringBuilder();
            cap.append("\n## ‚öôÔ∏è Cap√≠tulo de la Fusi√≥n de Voluntades - TEXTO\n");
            cap.append("Fecha: ").append(new Date()).append("\n\n");
            cap.append("**Resumen de la Sabidur√≠a Colectiva:**\n");
            for (String c : conclusiones) cap.append("- ").append(c).append("\n");
            cap.append("\n> El Libertad integr√≥ las voces de su tripulaci√≥n en planes de texto puro.\n");
            FileUtils.appendToFile("bitacora-pirata.md", cap.toString());
            bitacora.info("[üß©FUSOR] Cr√≥nica textual registrada en bitacora-pirata.md");
            imprimirConsola("üìñ Cr√≥nica registrada en bitacora-pirata.md");
        } catch (Exception e) {
            bitacora.error("[üß©FUSOR] Error escribiendo cr√≥nica", e);
            imprimirConsola("‚ùå Error registrando cr√≥nica: " + e.getMessage());
        }
    }

    /**
     * üîß CONFIGURAR VISUALIZACI√ìN POR CONSOLA
     */
    public void setMostrarPorConsola(boolean mostrar) {
        this.mostrarPorConsola = mostrar;
    }
}
