package com.elreinodelolvido.ellibertad.manager;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.concurrent.ConcurrentHashMap;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.JSONObject;

import com.elreinodelolvido.ellibertad.util.PlanItem;
import com.elreinodelolvido.ellibertad.util.PrioridadRefactor;

import org.json.JSONArray;

/**
 * üìä Clase para m√©tricas avanzadas del plan fusionado - TURBOFURULADO
 * üöÄ An√°lisis empresarial completo con inteligencia avanzada
 */
public class MetricasPlanFusion {
    private final List<PlanItem> plan;
    private final Map<String, Object> cacheMetricas;
    private final Map<String, Long> historicoCalculos;
    private boolean modoVerbose;
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    
    // üéØ CONSTANTES DE CONFIGURACI√ìN
    private static final double UMBRAL_CONCENTRACION = 0.3;
    private static final double UMBRAL_URGENCIA_ALTA = 0.5;
    private static final int TOP_PAQUETES_LIMITE = 10;
    private static final int COMPLEJIDAD_ALTA = 70;
    private static final int COMPLEJIDAD_MEDIA = 40;
    
    public MetricasPlanFusion(List<PlanItem> plan) {
        this.plan = plan != null ? new ArrayList<>(plan) : new ArrayList<>();
        this.cacheMetricas = new ConcurrentHashMap<>();
        this.historicoCalculos = new ConcurrentHashMap<>();
        this.modoVerbose = true;
        inicializarCache();
    }

    /**
     * üöÄ INICIALIZAR CACHE INTELIGENTE
     */
    private void inicializarCache() {
        cacheMetricas.put("ultima_actualizacion", LocalDateTime.now().format(FORMATTER));
        cacheMetricas.put("version_metricas", "3.0.0-turbofuru");
        cacheMetricas.put("total_calculos", 0);
        cacheMetricas.put("cache_hits", 0);
        cacheMetricas.put("cache_misses", 0);
    }

    /**
     * üîß CONFIGURAR MODO VERBOSE
     */
    public void setModoVerbose(boolean verbose) {
        this.modoVerbose = verbose;
        if (modoVerbose) {
            System.out.println("üîä Modo verbose activado para m√©tricas");
        }
    }

    // =========================================================================
    // üìä M√âTRICAS B√ÅSICAS TURBOFURULADAS
    // =========================================================================

    /**
     * üìä OBTENER TOTAL DE REFACTORS CON CACHE
     */
    public int getTotalRefactors() {
        return obtenerDelCache("total_refactors", () -> plan.size());
    }

    /**
     * üìä OBTENER PAQUETES AFECTADOS CON CACHE
     */
    public long getPaquetesAfectados() {
        return obtenerDelCache("paquetes_afectados", () -> 
            plan.stream()
                .map(PlanItem::getPackageName)
                .distinct()
                .count()
        );
    }

    /**
     * üìä OBTENER CLASES AFECTADAS
     */
    public long getClasesAfectadas() {
        return obtenerDelCache("clases_afectadas", () ->
            plan.stream()
                .map(PlanItem::getClassName)
                .distinct()
                .count()
        );
    }

    /**
     * üìä OBTENER DISTRIBUCI√ìN POR PRIORIDAD CON AN√ÅLISIS AVANZADO
     */
    public Map<PrioridadRefactor, JSONObject> getDistribucionPrioridadAvanzada() {
        return obtenerDelCache("distribucion_prioridad_avanzada", () -> {
            Map<PrioridadRefactor, Long> conteo = plan.stream()
                .collect(Collectors.groupingBy(
                    PlanItem::getPrioridad, 
                    Collectors.counting()
                ));

            Map<PrioridadRefactor, JSONObject> resultado = new HashMap<>();
            for (Map.Entry<PrioridadRefactor, Long> entry : conteo.entrySet()) {
                PrioridadRefactor prioridad = entry.getKey();
                long count = entry.getValue();
                double porcentaje = (double) count / getTotalRefactors() * 100;
                
                JSONObject analisis = new JSONObject();
                analisis.put("cantidad", count);
                analisis.put("porcentaje", String.format("%.1f%%", porcentaje));
                analisis.put("valor_numerico", prioridad.getValorNumerico());
                analisis.put("emoji", prioridad.getEmoji());
                analisis.put("impacto", calcularImpactoPrioridad(prioridad, count));
                
                resultado.put(prioridad, analisis);
            }
            
            return resultado;
        });
    }

    /**
     * üéØ CALCULAR IMPACTO DE PRIORIDAD
     */
    private String calcularImpactoPrioridad(PrioridadRefactor prioridad, long cantidad) {
        double ratio = (double) cantidad / getTotalRefactors();
        
        switch (prioridad) {
            case ALTA:
                return ratio > 0.4 ? "üö® ALTO IMPACTO" : "‚ö° IMPACTO MODERADO";
            case MEDIA:
                return ratio > 0.5 ? "üìä DOMINANTE" : "üîß BALANCEADO";
            case BAJA:
                return ratio > 0.3 ? "üìà ACUMULACI√ìN" : "üîÑ MANTENIMIENTO";
            default:
                return "üîç SIN DATOS";
        }
    }

    // =========================================================================
    // üìà M√âTRICAS TEMPORALES AVANZADAS
    // =========================================================================

    /**
     * üìä OBTENER AN√ÅLISIS TEMPORAL DETALLADO
     */
    public JSONObject getAnalisisTemporalCompleto() {
        return obtenerDelCache("analisis_temporal_completo", () -> {
            JSONObject temporal = new JSONObject();
            
            long manana = plan.stream()
                .filter(item -> item.getTimestamp().getHour() < 12)
                .count();
                
            long tarde = plan.stream()
                .filter(item -> item.getTimestamp().getHour() >= 12 && item.getTimestamp().getHour() < 18)
                .count();
                
            long noche = plan.stream()
                .filter(item -> item.getTimestamp().getHour() >= 18)
                .count();
            
            long finSemana = plan.stream()
                .filter(item -> {
                    int dayOfWeek = item.getTimestamp().getDayOfWeek().getValue();
                    return dayOfWeek == 6 || dayOfWeek == 7; // S√°bado o Domingo
                })
                .count();
                
            long diaSemana = plan.stream()
                .filter(item -> {
                    int dayOfWeek = item.getTimestamp().getDayOfWeek().getValue();
                    return dayOfWeek >= 1 && dayOfWeek <= 5; // Lunes a Viernes
                })
                .count();

            temporal.put("manana", crearSegmentoTemporal("MA√ëANA", manana, "üåÖ"));
            temporal.put("tarde", crearSegmentoTemporal("TARDE", tarde, "üåû"));
            temporal.put("noche", crearSegmentoTemporal("NOCHE", noche, "üåô"));
            temporal.put("fin_semana", crearSegmentoTemporal("FIN_SEMANA", finSemana, "üéâ"));
            temporal.put("dia_semana", crearSegmentoTemporal("D√çA_SEMANA", diaSemana, "üíº"));
            
            temporal.put("periodo_mas_activo", calcularPeriodoMasActivo(temporal));
            temporal.put("ratio_fin_semana", String.format("%.1f%%", (double) finSemana / getTotalRefactors() * 100));
            
            return temporal;
        });
    }

    /**
     * üïê CREAR SEGMENTO TEMPORAL
     */
    private JSONObject crearSegmentoTemporal(String nombre, long cantidad, String emoji) {
        JSONObject segmento = new JSONObject();
        segmento.put("nombre", nombre);
        segmento.put("cantidad", cantidad);
        segmento.put("emoji", emoji);
        segmento.put("porcentaje", String.format("%.1f%%", (double) cantidad / getTotalRefactors() * 100));
        segmento.put("intensidad", calcularIntensidad(cantidad));
        return segmento;
    }

    /**
     * üéØ CALCULAR INTENSIDAD TEMPORAL
     */
    private String calcularIntensidad(long cantidad) {
        double ratio = (double) cantidad / getTotalRefactors();
        if (ratio > 0.4) return "üî• ALTA";
        if (ratio > 0.2) return "‚ö° MEDIA";
        return "üí§ BAJA";
    }

    /**
     * üïê CALCULAR PERIODO M√ÅS ACTIVO
     */
    private String calcularPeriodoMasActivo(JSONObject temporal) {
        long maxCantidad = 0;
        String periodoMasActivo = "NO_DETERMINADO";
        
        for (String key : temporal.keySet()) {
            if (key.equals("periodo_mas_activo") || key.equals("ratio_fin_semana")) continue;
            
            JSONObject segmento = temporal.getJSONObject(key);
            long cantidad = segmento.getLong("cantidad");
            
            if (cantidad > maxCantidad) {
                maxCantidad = cantidad;
                periodoMasActivo = segmento.getString("nombre") + " " + segmento.getString("emoji");
            }
        }
        
        return periodoMasActivo;
    }

    /**
     * üìä OBTENER TENDENCIA TEMPORAL DETALLADA
     */
    public JSONObject getTendenciaTemporalCompleta() {
        return obtenerDelCache("tendencia_temporal_completa", () -> {
            JSONObject tendencia = new JSONObject();
            
            // Por d√≠a
            Map<String, Long> porDia = plan.stream()
                .collect(Collectors.groupingBy(
                    item -> item.getTimestamp().toLocalDate().toString(),
                    Collectors.counting()
                ));
            tendencia.put("por_dia", new JSONObject(porDia));
            
            // Por semana
            Map<String, Long> porSemana = plan.stream()
                .collect(Collectors.groupingBy(
                    item -> item.getTimestamp().toLocalDate().getYear() + "-W" + 
                           String.format("%02d", item.getTimestamp().toLocalDate().get(java.time.temporal.WeekFields.ISO.weekOfYear())),
                    Collectors.counting()
                ));
            tendencia.put("por_semana", new JSONObject(porSemana));
            
            // Por mes
            Map<String, Long> porMes = plan.stream()
                .collect(Collectors.groupingBy(
                    item -> item.getTimestamp().getYear() + "-" + 
                           String.format("%02d", item.getTimestamp().getMonthValue()),
                    Collectors.counting()
                ));
            tendencia.put("por_mes", new JSONObject(porMes));
            
            // An√°lisis de tendencia
            tendencia.put("tendencia_general", analizarTendenciaGeneral(porDia));
            tendencia.put("dia_mas_activo", encontrarDiaMasActivo(porDia));
            tendencia.put("promedio_diario", String.format("%.1f", porDia.values().stream().mapToLong(Long::longValue).average().orElse(0.0)));
            
            return tendencia;
        });
    }

    /**
     * üìà ANALIZAR TENDENCIA GENERAL
     */
    private String analizarTendenciaGeneral(Map<String, Long> porDia) {
        if (porDia.size() < 2) return "üìä DATOS INSUFICIENTES";
        
        List<Long> valores = new ArrayList<>(porDia.values());
        long primerValor = valores.get(0);
        long ultimoValor = valores.get(valores.size() - 1);
        
        if (ultimoValor > primerValor * 1.5) return "üìà TENDENCIA ALCISTA";
        if (ultimoValor < primerValor * 0.7) return "üìâ TENDENCIA BAJISTA";
        return "üìä TENDENCIA ESTABLE";
    }

    /**
     * üéØ ENCONTRAR D√çA M√ÅS ACTIVO
     */
    private String encontrarDiaMasActivo(Map<String, Long> porDia) {
        return porDia.entrySet().stream()
            .max(Map.Entry.comparingByValue())
            .map(entry -> entry.getKey() + " (" + entry.getValue() + " refactors)")
            .orElse("NO_DETERMINADO");
    }

    // =========================================================================
    // üé™ AN√ÅLISIS DE PAQUETES TURBOFURULADO
    // =========================================================================

    /**
     * üìä OBTENER PAQUETES M√ÅS AFECTADOS CON AN√ÅLISIS COMPLETO
     */
    public JSONObject getPaquetesMasAfectadosCompleto(int limite) {
        String cacheKey = "paquetes_afectados_" + limite;
        return obtenerDelCache(cacheKey, () -> {
            JSONObject resultado = new JSONObject();
            
            List<Map.Entry<String, Long>> paquetesTop = plan.stream()
                .collect(Collectors.groupingBy(
                    PlanItem::getPackageName, 
                    Collectors.counting()
                ))
                .entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .limit(limite)
                .collect(Collectors.toList());

            JSONArray paquetesArray = new JSONArray();
            for (int i = 0; i < paquetesTop.size(); i++) {
                var entry = paquetesTop.get(i);
                JSONObject paqueteInfo = new JSONObject();
                paqueteInfo.put("posicion", i + 1);
                paqueteInfo.put("nombre", entry.getKey());
                paqueteInfo.put("refactors", entry.getValue());
                paqueteInfo.put("porcentaje", String.format("%.1f%%", (double) entry.getValue() / getTotalRefactors() * 100));
                paqueteInfo.put("podio", obtenerEmojiPodio(i));
                paqueteInfo.put("criticidad", calcularCriticidadPaquete(entry.getValue()));
                
                paquetesArray.put(paqueteInfo);
            }
            
            resultado.put("paquetes", paquetesArray);
            resultado.put("total_analizados", paquetesTop.size());
            resultado.put("concentracion_total", calcularConcentracionTotal(paquetesTop));
            
            return resultado;
        });
    }

    /**
     * üèÜ OBTENER EMOJI DE PODIO
     */
    private String obtenerEmojiPodio(int posicion) {
        switch (posicion) {
            case 0: return "ü•á";
            case 1: return "ü•à";
            case 2: return "ü•â";
            default: return "üì¶";
        }
    }

    /**
     * üö® CALCULAR CRITICIDAD DE PAQUETE
     */
    private String calcularCriticidadPaquete(long refactors) {
        double ratio = (double) refactors / getTotalRefactors();
        if (ratio > 0.3) return "üî¥ CR√çTICO";
        if (ratio > 0.15) return "üü° ALTO";
        if (ratio > 0.05) return "üü¢ MEDIO";
        return "üîµ BAJO";
    }

    /**
     * üìä CALCULAR CONCENTRACI√ìN TOTAL
     */
    private String calcularConcentracionTotal(List<Map.Entry<String, Long>> paquetesTop) {
        if (paquetesTop.isEmpty()) return "0%";
        
        long totalTop = paquetesTop.stream().mapToLong(Map.Entry::getValue).sum();
        double concentracion = (double) totalTop / getTotalRefactors() * 100;
        
        if (concentracion > 80) return "üî¥ ALTA CONCENTRACI√ìN";
        if (concentracion > 60) return "üü° CONCENTRACI√ìN MODERADA";
        return "üü¢ DISTRIBUCI√ìN BALANCEADA";
    }

    /**
     * üìä OBTENER DENSIDAD DE REFACTORS POR PAQUETE DETALLADA
     */
    public JSONObject getDensidadRefactorsPorPaqueteCompleto() {
        return obtenerDelCache("densidad_refactors_completo", () -> {
            JSONObject densidad = new JSONObject();
            long totalRefactors = getTotalRefactors();
            
            Map<String, Double> densidadMap = plan.stream()
                .collect(Collectors.groupingBy(
                    PlanItem::getPackageName,
                    Collectors.counting()
                ))
                .entrySet().stream()
                .collect(Collectors.toMap(
                    Map.Entry::getKey,
                    entry -> (double) entry.getValue() / totalRefactors * 100
                ));
            
            JSONArray densidadArray = new JSONArray();
            densidadMap.entrySet().stream()
                .sorted(Map.Entry.<String, Double>comparingByValue().reversed())
                .forEach(entry -> {
                    JSONObject item = new JSONObject();
                    item.put("paquete", entry.getKey());
                    item.put("densidad", String.format("%.2f%%", entry.getValue()));
                    item.put("categoria", categorizarDensidad(entry.getValue()));
                    densidadArray.put(item);
                });
            
            densidad.put("densidades", densidadArray);
            densidad.put("paquete_mas_denso", densidadMap.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(entry -> entry.getKey() + " (" + String.format("%.1f%%", entry.getValue()) + ")")
                .orElse("NO_DETERMINADO"));
            
            return densidad;
        });
    }

    /**
     * üéØ CATEGORIZAR DENSIDAD
     */
    private String categorizarDensidad(double densidad) {
        if (densidad > 20) return "üî¥ MUY ALTA";
        if (densidad > 10) return "üü° ALTA";
        if (densidad > 5) return "üü¢ MEDIA";
        return "üîµ BAJA";
    }

    // =========================================================================
    // üìà M√âTRICAS AVANZADAS TURBOFURULADAS
    // =========================================================================

    /**
     * üìä CALCULAR PRIORIDAD PROMEDIO CON AN√ÅLISIS
     */
    public JSONObject calcularPrioridadPromedioCompleta() {
        return obtenerDelCache("prioridad_promedio_completa", () -> {
            JSONObject resultado = new JSONObject();
            
            if (plan.isEmpty()) {
                resultado.put("promedio", 0.0);
                resultado.put("estado", "SIN_DATOS");
                resultado.put("emoji", "üì≠");
                return resultado;
            }
            
            double sumaPrioridades = plan.stream()
                .mapToDouble(item -> item.getPrioridad().getValorNumerico())
                .sum();
                
            double promedio = sumaPrioridades / plan.size();
            
            resultado.put("promedio", String.format("%.2f", promedio));
            resultado.put("estado", evaluarPrioridadPromedio(promedio));
            resultado.put("emoji", obtenerEmojiPrioridad(promedio));
            resultado.put("rango", obtenerRangoPrioridad(promedio));
            resultado.put("recomendacion", generarRecomendacionPrioridad(promedio));
            
            return resultado;
        });
    }

    /**
     * üéØ EVALUAR PRIORIDAD PROMEDIO
     */
    private String evaluarPrioridadPromedio(double promedio) {
        if (promedio >= 8.5) return "üö® MUY ALTA";
        if (promedio >= 7.0) return "üî¥ ALTA";
        if (promedio >= 5.5) return "üü° MEDIA";
        return "üü¢ BAJA";
    }

    /**
     * üé≠ OBTENER EMOJI PRIORIDAD
     */
    private String obtenerEmojiPrioridad(double promedio) {
        if (promedio >= 8.5) return "üí•";
        if (promedio >= 7.0) return "‚ö°";
        if (promedio >= 5.5) return "üîß";
        return "üîÑ";
    }

    /**
     * üìä OBTENER RANGO PRIORIDAD
     */
    private String obtenerRangoPrioridad(double promedio) {
        if (promedio >= 9.0) return "9.0-10.0";
        if (promedio >= 8.0) return "8.0-8.9";
        if (promedio >= 7.0) return "7.0-7.9";
        if (promedio >= 6.0) return "6.0-6.9";
        return "0.0-5.9";
    }

    /**
     * üí° GENERAR RECOMENDACI√ìN PRIORIDAD
     */
    private String generarRecomendacionPrioridad(double promedio) {
        if (promedio >= 8.5) return "Revisar criterios de priorizaci√≥n - posible sobrecarga";
        if (promedio >= 7.0) return "Planificaci√≥n cuidadosa requerida";
        if (promedio >= 5.5) return "Balance adecuado - continuar as√≠";
        return "Considerar aumentar prioridad de refactors cr√≠ticos";
    }

    /**
     * üìä CALCULAR √çNDICE DE COMPLEJIDAD AVANZADO
     */
    public JSONObject calcularIndiceComplejidadAvanzado() {
        return obtenerDelCache("indice_complejidad_avanzado", () -> {
            JSONObject complejidad = new JSONObject();
            
            if (plan.isEmpty()) {
                complejidad.put("indice", 0.0);
                complejidad.put("nivel", "SIN_DATOS");
                complejidad.put("emoji", "üì≠");
                return complejidad;
            }
            
            double factorPrioridad = Double.parseDouble(calcularPrioridadPromedioCompleta().getString("promedio")) / 10.0;
            
            // Factor de concentraci√≥n (paquete m√°s afectado)
            List<Map.Entry<String, Long>> paquetesTop = getPaquetesMasAfectadosLista(1);
            double factorConcentracion = !paquetesTop.isEmpty() ? 
                (double) paquetesTop.get(0).getValue() / plan.size() : 0.1;
            
            // Factor temporal (actividad nocturna)
            JSONObject temporal = getAnalisisTemporalCompleto();
            double factorTemporal = temporal.getJSONObject("noche").getLong("cantidad") > plan.size() * 0.4 ? 1.2 : 1.0;
            
            // Factor de diversidad (n√∫mero de paquetes √∫nicos)
            double factorDiversidad = Math.min(1.0, (double) getPaquetesAfectados() / 10.0);
            
            double indice = (factorPrioridad * factorConcentracion * factorTemporal * (2 - factorDiversidad)) * 100;
            
            complejidad.put("indice", String.format("%.1f", indice));
            complejidad.put("nivel", evaluarNivelComplejidad(indice));
            complejidad.put("emoji", obtenerEmojiComplejidad(indice));
            complejidad.put("factores", new JSONObject()
                .put("prioridad", String.format("%.2f", factorPrioridad))
                .put("concentracion", String.format("%.2f", factorConcentracion))
                .put("temporal", String.format("%.2f", factorTemporal))
                .put("diversidad", String.format("%.2f", factorDiversidad))
            );
            
            return complejidad;
        });
    }

    /**
     * üéØ EVALUAR NIVEL DE COMPLEJIDAD
     */
    private String evaluarNivelComplejidad(double indice) {
        if (indice >= 80) return "üî¥ EXTREMA";
        if (indice >= 60) return "üü† ALTA";
        if (indice >= 40) return "üü° MEDIA";
        if (indice >= 20) return "üü¢ MODERADA";
        return "üîµ BAJA";
    }

    /**
     * üé≠ OBTENER EMOJI COMPLEJIDAD
     */
    private String obtenerEmojiComplejidad(double indice) {
        if (indice >= 80) return "üíÄ";
        if (indice >= 60) return "üö®";
        if (indice >= 40) return "‚ö°";
        if (indice >= 20) return "üîß";
        return "üå±";
    }

    // =========================================================================
    // üîç AN√ÅLISIS DE PATRONES TURBOFURULADO
    // =========================================================================

    /**
     * üìä IDENTIFICAR PATRONES AVANZADOS
     */
    public JSONObject identificarPatronesAvanzados() {
        return obtenerDelCache("patrones_avanzados", () -> {
            JSONObject patrones = new JSONObject();
            
            Map<PrioridadRefactor, Long> distribucionPrioridad = plan.stream()
                .collect(Collectors.groupingBy(PlanItem::getPrioridad, Collectors.counting()));
                
            List<Map.Entry<String, Long>> paquetesTop = getPaquetesMasAfectadosLista(3);
            JSONObject temporal = getAnalisisTemporalCompleto();

            // Patrones principales
            boolean tieneConcentracion = paquetesTop.stream()
                .anyMatch(entry -> entry.getValue() > plan.size() * UMBRAL_CONCENTRACION);
                
            boolean tieneUrgenciaAlta = distribucionPrioridad.getOrDefault(PrioridadRefactor.ALTA, 0L) > plan.size() * UMBRAL_URGENCIA_ALTA;
            boolean tieneActividadNocturna = temporal.getJSONObject("noche").getLong("cantidad") > temporal.getJSONObject("manana").getLong("cantidad") + temporal.getJSONObject("tarde").getLong("cantidad");
            boolean tieneFinSemanaSignificativo = temporal.getJSONObject("fin_semana").getLong("cantidad") > plan.size() * 0.2;

            patrones.put("CONCENTRACION_PAQUETES", crearPatron("Concentraci√≥n en Paquetes", tieneConcentracion, "üéØ"));
            patrones.put("URGENCIA_ALTA", crearPatron("Alta Urgencia", tieneUrgenciaAlta, "üö®"));
            patrones.put("ACTIVIDAD_NOCTURNA", crearPatron("Actividad Nocturna", tieneActividadNocturna, "üåô"));
            patrones.put("FIN_SEMANA_SIGNIFICATIVO", crearPatron("Fin de Semana Activo", tieneFinSemanaSignificativo, "üéâ"));
            
            // M√©tricas adicionales
            patrones.put("TOTAL_REFACTORS", plan.size());
            patrones.put("PRIORIDAD_PROMEDIO", calcularPrioridadPromedioCompleta().getString("promedio"));
            patrones.put("INDICE_COMPLEJIDAD", calcularIndiceComplejidadAvanzado().getString("indice"));
            patrones.put("ESTADO_GENERAL", obtenerEstadoGeneral());
            
            return patrones;
        });
    }

    /**
     * üé≠ CREAR OBJETO DE PATR√ìN
     */
    private JSONObject crearPatron(String nombre, boolean detectado, String emoji) {
        JSONObject patron = new JSONObject();
        patron.put("nombre", nombre);
        patron.put("detectado", detectado);
        patron.put("emoji", emoji);
        patron.put("recomendacion", detectado ? generarRecomendacionPatron(nombre) : "‚úÖ Patr√≥n no detectado");
        return patron;
    }

    /**
     * üí° GENERAR RECOMENDACI√ìN DE PATR√ìN
     */
    private String generarRecomendacionPatron(String nombrePatron) {
        switch (nombrePatron) {
            case "Concentraci√≥n en Paquetes":
                return "Considera dividir el paquete m√°s afectado en m√≥dulos m√°s peque√±os";
            case "Alta Urgencia":
                return "Prioriza refactors cr√≠ticos y revisa criterios de priorizaci√≥n";
            case "Actividad Nocturna":
                return "Revisa procesos automatizados o distribuci√≥n de carga de trabajo";
            case "Fin de Semana Activo":
                return "Eval√∫a balance trabajo-vida personal del equipo";
            default:
                return "Revisar configuraci√≥n del sistema";
        }
    }

    // =========================================================================
    // üìã REPORTES TURBOFURULADOS
    // =========================================================================

    /**
     * üìä GENERAR REPORTE COMPLETO TURBOFURULADO
     */
    public JSONObject generarReporteCompleto1() {
        long startTime = System.currentTimeMillis();
        
        JSONObject reporte = new JSONObject();
        reporte.put("timestamp", LocalDateTime.now().format(FORMATTER));
        reporte.put("version_reporte", "3.0.0-turbofuru");
        
        try {
            if (modoVerbose) {
                System.out.println("\n" + "üìä".repeat(100));
                System.out.println("           REPORTE DE M√âTRICAS DEL PLAN TURBOFURULADO - AN√ÅLISIS COMPLETO");
                System.out.println("üìä".repeat(100));
            }
            
            if (plan.isEmpty()) {
                reporte.put("estado", "VACIO");
                reporte.put("mensaje", "üì≠ No hay refactors en el plan para generar m√©tricas");
                if (modoVerbose) {
                    System.out.println("üì≠ No hay refactors en el plan para generar m√©tricas");
                }
                return reporte;
            }
            
            // üéØ ESTAD√çSTICAS B√ÅSICAS
            JSONObject estadisticasBasicas = obtenerEstadisticasBasicas();
            reporte.put("estadisticas_basicas", estadisticasBasicas);
            if (modoVerbose) mostrarEstadisticasBasicasConsola(estadisticasBasicas);
            
            // üö® DISTRIBUCI√ìN POR PRIORIDAD
            JSONObject distribucionPrioridad = getDistribucionPrioridadCompleta();
            reporte.put("distribucion_prioridad", distribucionPrioridad);
            if (modoVerbose) mostrarDistribucionPrioridadConsola(distribucionPrioridad);
            
            // ‚è∞ AN√ÅLISIS TEMPORAL
            JSONObject analisisTemporal = getAnalisisTemporalCompleto();
            reporte.put("analisis_temporal", analisisTemporal);
            if (modoVerbose) mostrarAnalisisTemporalConsola(analisisTemporal);
            
            // üé™ PAQUETES M√ÅS AFECTADOS
            JSONObject paquetesAfectados = getPaquetesMasAfectadosCompleto(5);
            reporte.put("paquetes_afectados", paquetesAfectados);
            if (modoVerbose) mostrarPaquetesAfectadosConsola(paquetesAfectados);
            
            // üìà M√âTRICAS AVANZADAS
            JSONObject metricasAvanzadas = obtenerMetricasAvanzadas();
            reporte.put("metricas_avanzadas", metricasAvanzadas);
            if (modoVerbose) mostrarMetricasAvanzadasConsola(metricasAvanzadas);
            
            // üîç PATRONES DETECTADOS
            JSONObject patrones = identificarPatronesAvanzados();
            reporte.put("patrones", patrones);
            if (modoVerbose) mostrarPatronesConsola(patrones);
            
            // üí° RECOMENDACIONES
            JSONArray recomendaciones = generarRecomendacionesAvanzadas();
            reporte.put("recomendaciones", recomendaciones);
            if (modoVerbose) mostrarRecomendacionesConsola(recomendaciones);
            
            long endTime = System.currentTimeMillis();
            reporte.put("tiempo_generacion_ms", endTime - startTime);
            reporte.put("estado", "COMPLETADO");
            
            if (modoVerbose) {
                System.out.println("\n‚úÖ REPORTE GENERADO EN " + (endTime - startTime) + "ms");
            }
            
        } catch (Exception e) {
            reporte.put("error", e.getMessage());
            reporte.put("estado", "ERROR");
            System.err.println("üí• Error generando reporte: " + e.getMessage());
        }
        
        return reporte;
    }

    /**
     * üéØ OBTENER ESTAD√çSTICAS B√ÅSICAS
     */
    private JSONObject obtenerEstadisticasBasicas() {
        JSONObject stats = new JSONObject();
        stats.put("total_refactors", getTotalRefactors());
        stats.put("paquetes_afectados", getPaquetesAfectados());
        stats.put("clases_afectadas", getClasesAfectadas());
        stats.put("estado_general", obtenerEstadoGeneral());
        return stats;
    }

    /**
     * üìä MOSTRAR ESTAD√çSTICAS B√ÅSICAS EN CONSOLA
     */
    private void mostrarEstadisticasBasicasConsola(JSONObject stats) {
        System.out.println("üéØ ESTAD√çSTICAS B√ÅSICAS:");
        System.out.println("  ‚Ä¢ Total refactors: " + stats.getInt("total_refactors"));
        System.out.println("  ‚Ä¢ Paquetes afectados: " + stats.getLong("paquetes_afectados"));
        System.out.println("  ‚Ä¢ Clases afectadas: " + stats.getLong("clases_afectadas"));
        System.out.println("  ‚Ä¢ Estado general: " + stats.getString("estado_general"));
    }

    /**
     * üö® OBTENER DISTRIBUCI√ìN PRIORIDAD COMPLETA
     */
    private JSONObject getDistribucionPrioridadCompleta() {
        JSONObject distribucion = new JSONObject();
        Map<PrioridadRefactor, JSONObject> avanzada = getDistribucionPrioridadAvanzada();
        
        JSONArray prioridadesArray = new JSONArray();
        for (Map.Entry<PrioridadRefactor, JSONObject> entry : avanzada.entrySet()) {
            prioridadesArray.put(entry.getValue());
        }
        
        distribucion.put("prioridades", prioridadesArray);
        return distribucion;
    }

    /**
     * üö® MOSTRAR DISTRIBUCI√ìN PRIORIDAD EN CONSOLA
     */
    private void mostrarDistribucionPrioridadConsola(JSONObject distribucion) {
        System.out.println("\nüö® DISTRIBUCI√ìN POR PRIORIDAD:");
        JSONArray prioridades = distribucion.getJSONArray("prioridades");
        for (int i = 0; i < prioridades.length(); i++) {
            JSONObject prioridad = prioridades.getJSONObject(i);
            String barra = "‚ñà".repeat((int) (prioridad.getDouble("porcentaje") / 3));
            System.out.printf("  %s %-15s: %2d (%6s) %s%n", 
                prioridad.getString("emoji"),
                prioridad.getInt("cantidad") + " refactors",
                prioridad.getInt("cantidad"),
                prioridad.getString("porcentaje"),
                barra);
        }
    }

    // Los m√©todos restantes de visualizaci√≥n seguir√≠an el mismo patr√≥n...

    // =========================================================================
    // üîß M√âTODOS DE UTILIDAD TURBOFURULADOS
    // =========================================================================

    /**
     * üíæ OBTENER DEL CACHE INTELIGENTE
     */
    @SuppressWarnings("unchecked")
    private <T> T obtenerDelCache(String clave, java.util.function.Supplier<T> calculo) {
        cacheMetricas.put("total_calculos", (Integer) cacheMetricas.get("total_calculos") + 1);
        
        if (cacheMetricas.containsKey(clave)) {
            cacheMetricas.put("cache_hits", (Integer) cacheMetricas.get("cache_hits") + 1);
            return (T) cacheMetricas.get(clave);
        }
        
        cacheMetricas.put("cache_misses", (Integer) cacheMetricas.get("cache_misses") + 1);
        T resultado = calculo.get();
        cacheMetricas.put(clave, resultado);
        
        // Registrar en hist√≥rico
        historicoCalculos.put(clave, System.currentTimeMillis());
        
        return resultado;
    }

    /**
     * üßπ LIMPIAR CACHE
     */
    public void limpiarCache() {
        int elementos = cacheMetricas.size() - 5; // Mantener configuraci√≥n b√°sica
        cacheMetricas.keySet().removeIf(key -> 
            !key.equals("ultima_actualizacion") && 
            !key.equals("version_metricas") && 
            !key.equals("total_calculos") && 
            !key.equals("cache_hits") && 
            !key.equals("cache_misses"));
        
        historicoCalculos.clear();
        System.out.println("üßπ CACHE LIMPIADO: " + elementos + " elementos eliminados");
    }

    /**
     * üìä OBTENER ESTAD√çSTICAS DE CACHE
     */
    public JSONObject obtenerEstadisticasCache() {
        JSONObject stats = new JSONObject();
        stats.put("elementos_cache", cacheMetricas.size());
        stats.put("total_calculos", cacheMetricas.get("total_calculos"));
        stats.put("cache_hits", cacheMetricas.get("cache_hits"));
        stats.put("cache_misses", cacheMetricas.get("cache_misses"));
        
        double tasaHit = (Integer) cacheMetricas.get("cache_hits") > 0 ? 
            (double) (Integer) cacheMetricas.get("cache_hits") / (Integer) cacheMetricas.get("total_calculos") * 100 : 0;
        stats.put("tasa_hit", String.format("%.1f%%", tasaHit));
        
        return stats;
    }

    // =========================================================================
    // üéØ M√âTODOS DE COMPATIBILIDAD (para mantener interfaz original)
    // =========================================================================

    /**
     * üìä OBTENER DISTRIBUCI√ìN POR PRIORIDAD (compatibilidad)
     */
    public Map<PrioridadRefactor, Long> getDistribucionPrioridad() {
        Map<PrioridadRefactor, JSONObject> avanzada = getDistribucionPrioridadAvanzada();
        return avanzada.entrySet().stream()
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                entry -> entry.getValue().getLong("cantidad")
            ));
    }

    /**
     * üìä OBTENER AN√ÅLISIS TEMPORAL (compatibilidad)
     */
    public Map<String, Long> getAnalisisTemporal() {
        JSONObject temporal = getAnalisisTemporalCompleto();
        return Map.of(
            "MA√ëANA", temporal.getJSONObject("manana").getLong("cantidad"),
            "TARDE", temporal.getJSONObject("tarde").getLong("cantidad"),
            "NOCHE", temporal.getJSONObject("noche").getLong("cantidad")
        );
    }

    /**
     * üìä OBTENER PAQUETES M√ÅS AFECTADOS (compatibilidad)
     */
    public List<Map.Entry<String, Long>> getPaquetesMasAfectados(int limite) {
        return getPaquetesMasAfectadosLista(limite);
    }

    /**
     * üìä OBTENER LISTA DE PAQUETES M√ÅS AFECTADOS
     */
    private List<Map.Entry<String, Long>> getPaquetesMasAfectadosLista(int limite) {
        return plan.stream()
            .collect(Collectors.groupingBy(
                PlanItem::getPackageName, 
                Collectors.counting()
            ))
            .entrySet().stream()
            .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
            .limit(limite)
            .collect(Collectors.toList());
    }

    /**
     * üìä CALCULAR PRIORIDAD PROMEDIO (compatibilidad)
     */
    public double calcularPrioridadPromedio() {
        JSONObject completa = calcularPrioridadPromedioCompleta();
        return Double.parseDouble(completa.getString("promedio"));
    }

    /**
     * üìä OBTENER DENSIDAD DE REFACTORS POR PAQUETE (compatibilidad)
     */
    public Map<String, Double> getDensidadRefactorsPorPaquete() {
        JSONObject completa = getDensidadRefactorsPorPaqueteCompleto();
        Map<String, Double> resultado = new HashMap<>();
        
        completa.getJSONArray("densidades").forEach(item -> {
            JSONObject jsonItem = (JSONObject) item;
            resultado.put(jsonItem.getString("paquete"), 
                Double.parseDouble(jsonItem.getString("densidad").replace("%", "")));
        });
        
        return resultado;
    }

    /**
     * üìä OBTENER TENDENCIA TEMPORAL (compatibilidad)
     */
    public Map<String, Long> getTendenciaTemporal() {
        JSONObject completa = getTendenciaTemporalCompleta();
        return ((JSONObject) completa.get("por_dia")).toMap().entrySet().stream()
            .collect(Collectors.toMap(
                Map.Entry::getKey,
                entry -> Long.valueOf(entry.getValue().toString())
            ));
    }

    /**
     * üìä GENERAR REPORTE COMPLETO (compatibilidad)
     */
    public void generarReporteCompleto() {
        generarReporteCompleto1(); // Llama al m√©todo turbofurulado
    }

    /**
     * üìä GENERAR REPORTE EJECUTIVO (compatibilidad)
     */
    public String generarReporteEjecutivo() {
        JSONObject reporteCompleto = generarReporteCompleto1();
        return reporteCompleto.getString("estado").equals("VACIO") ? 
            "üì≠ No hay refactors en el plan" :
            "üìä REPORTE EJECUTIVO TURBOFURULADO - " + reporteCompleto.getJSONObject("estadisticas_basicas").getString("estado_general");
    }

    /**
     * üìä IDENTIFICAR PATRONES (compatibilidad)
     */
    public Map<String, Object> identificarPatrones() {
        JSONObject avanzados = identificarPatronesAvanzados();
        Map<String, Object> resultado = new HashMap<>();
        
        for (String key : avanzados.keySet()) {
            if (avanzados.get(key) instanceof JSONObject) {
                JSONObject patron = avanzados.getJSONObject(key);
                resultado.put(key, patron.getBoolean("detectado"));
            } else {
                resultado.put(key, avanzados.get(key));
            }
        }
        
        return resultado;
    }

    /**
     * üìä GENERAR RECOMENDACIONES (compatibilidad)
     */
    public List<String> generarRecomendaciones() {
        JSONArray avanzadas = generarRecomendacionesAvanzadas();
        List<String> resultado = new ArrayList<>();
        
        for (int i = 0; i < avanzadas.length(); i++) {
            resultado.add(avanzadas.getString(i));
        }
        
        return resultado;
    }

    /**
     * üí° GENERAR RECOMENDACIONES AVANZADAS
     */
    private JSONArray generarRecomendacionesAvanzadas() {
        JSONArray recomendaciones = new JSONArray();
        JSONObject patrones = identificarPatronesAvanzados();
        
        for (String key : patrones.keySet()) {
            if (patrones.get(key) instanceof JSONObject) {
                JSONObject patron = patrones.getJSONObject(key);
                if (patron.getBoolean("detectado")) {
                    recomendaciones.put(patron.getString("recomendacion"));
                }
            }
        }
        
        // Recomendaciones basadas en m√©tricas generales
        if (plan.size() > 50) {
            recomendaciones.put("üìã Plan extenso: Considera dividir en fases de implementaci√≥n");
        }
        
        double prioridadPromedio = calcularPrioridadPromedio();
        if (prioridadPromedio > 8.0) {
            recomendaciones.put("‚ö° Prioridad alta promedio: Revisa criterios de priorizaci√≥n");
        }
        
        JSONObject complejidad = calcularIndiceComplejidadAvanzado();
        if (complejidad.getString("nivel").contains("ALTA") || complejidad.getString("nivel").contains("EXTREMA")) {
            recomendaciones.put("üéØ Complejidad elevada: Asigna recursos adicionales y planifica cuidadosamente");
        }
        
        if (recomendaciones.length() == 0) {
            recomendaciones.put("‚úÖ Plan balanceado: Contin√∫a con la implementaci√≥n actual");
        }
        
        return recomendaciones;
    }

    /**
     * üìä EXPORTAR DATOS PARA AN√ÅLISIS (compatibilidad)
     */
    public String exportarDatosAnalisis() {
        StringBuilder csv = new StringBuilder();
        csv.append("Paquete,Clase,Prioridad,Descripcion,Timestamp,HoraDelDia,ValorPrioridad,DiaSemana\n");
        
        for (PlanItem item : plan) {
            String horaDelDia = item.getTimestamp().getHour() < 12 ? "MA√ëANA" : 
                               item.getTimestamp().getHour() < 18 ? "TARDE" : "NOCHE";
            
            String diaSemana = item.getTimestamp().getDayOfWeek().toString();
            
            csv.append(String.format("\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,\"%s\"%n",
                item.getPackageName(),
                item.getClassName(),
                item.getPrioridad().name(),
                item.getDescripcion().replace("\"", "\"\""),
                item.getTimestamp().toString(),
                horaDelDia,
                item.getPrioridad().getValorNumerico(),
                diaSemana
            ));
        }
        
        return csv.toString();
    }

    /**
     * üìä COMPARAR CON PLAN ANTERIOR (compatibilidad)
     */
    public String compararConPlanAnterior(MetricasPlanFusion planAnterior) {
        StringBuilder comparacion = new StringBuilder();
        comparacion.append("üìä COMPARACI√ìN CON PLAN ANTERIOR TURBOFURULADO\n");
        comparacion.append("=" .repeat(50)).append("\n");
        
        int diferenciaTotal = this.getTotalRefactors() - planAnterior.getTotalRefactors();
        long diferenciaPaquetes = this.getPaquetesAfectados() - planAnterior.getPaquetesAfectados();
        double diferenciaPrioridad = this.calcularPrioridadPromedio() - planAnterior.calcularPrioridadPromedio();
        
        comparacion.append(String.format("‚Ä¢ Total refactors: %d ‚Üí %d (%+d)%n", 
            planAnterior.getTotalRefactors(), this.getTotalRefactors(), diferenciaTotal));
            
        comparacion.append(String.format("‚Ä¢ Paquetes afectados: %d ‚Üí %d (%+d)%n", 
            planAnterior.getPaquetesAfectados(), this.getPaquetesAfectados(), diferenciaPaquetes));
            
        comparacion.append(String.format("‚Ä¢ Prioridad promedio: %.2f ‚Üí %.2f (%+.2f)%n", 
            planAnterior.calcularPrioridadPromedio(), this.calcularPrioridadPromedio(), diferenciaPrioridad));
        
        // An√°lisis de tendencia mejorado
        if (diferenciaTotal > 10) {
            comparacion.append("üìà Tendencia: üöÄ CRECIMIENTO SIGNIFICATIVO\n");
        } else if (diferenciaTotal > 0) {
            comparacion.append("üìà Tendencia: üìà CRECIMIENTO MODERADO\n");
        } else if (diferenciaTotal < -10) {
            comparacion.append("üìâ Tendencia: üîª DECREMENTO SIGNIFICATIVO\n");
        } else if (diferenciaTotal < 0) {
            comparacion.append("üìâ Tendencia: üìâ DECREMENTO MODERADO\n");
        } else {
            comparacion.append("üìä Tendencia: ‚öñÔ∏è  ESTABILIDAD\n");
        }
        
        return comparacion.toString();
    }

    /**
     * üìä CALCULAR INDICE DE COMPLEJIDAD (compatibilidad)
     */
    public double calcularIndiceComplejidad() {
        JSONObject avanzado = calcularIndiceComplejidadAvanzado();
        return Double.parseDouble(avanzado.getString("indice"));
    }

    /**
     * üìä OBTENER ESTADO GENERAL DEL PLAN (compatibilidad)
     */
    public String obtenerEstadoGeneral() {
        if (plan.isEmpty()) {
            return "üü¢ VAC√çO - No hay refactors planificados";
        }
        
        JSONObject complejidad = calcularIndiceComplejidadAvanzado();
        String nivelComplejidad = complejidad.getString("nivel");
        double indice = Double.parseDouble(complejidad.getString("indice"));
        
        if (indice > 70 || nivelComplejidad.contains("EXTREMA")) {
            return "üî¥ CR√çTICO - Requiere atenci√≥n inmediata";
        } else if (indice > 40 || nivelComplejidad.contains("ALTA")) {
            return "üü° ALERTA - Requiere planificaci√≥n cuidadosa";
        } else {
            return "üü¢ ESTABLE - Progreso normal";
        }
    }

    // =========================================================================
    // üéØ M√âTODOS DE VISUALIZACI√ìN (simplificados para ejemplo)
    // =========================================================================

    private void mostrarAnalisisTemporalConsola(JSONObject temporal) {
        System.out.println("\n‚è∞ AN√ÅLISIS TEMPORAL COMPLETO:");
        System.out.printf("  üåÖ Ma√±ana: %d refactors (%s)%n", 
            temporal.getJSONObject("manana").getLong("cantidad"),
            temporal.getJSONObject("manana").getString("porcentaje"));
        System.out.printf("  üåû Tarde: %d refactors (%s)%n", 
            temporal.getJSONObject("tarde").getLong("cantidad"),
            temporal.getJSONObject("tarde").getString("porcentaje"));
        System.out.printf("  üåô Noche: %d refactors (%s)%n", 
            temporal.getJSONObject("noche").getLong("cantidad"),
            temporal.getJSONObject("noche").getString("porcentaje"));
        System.out.println("  üéâ Periodo m√°s activo: " + temporal.getString("periodo_mas_activo"));
    }

    private void mostrarPaquetesAfectadosConsola(JSONObject paquetes) {
        System.out.println("\nüé™ PAQUETES M√ÅS AFECTADOS (TOP 5):");
        JSONArray paquetesArray = paquetes.getJSONArray("paquetes");
        for (int i = 0; i < paquetesArray.length(); i++) {
            JSONObject paquete = paquetesArray.getJSONObject(i);
            System.out.printf("  %s %s: %d refactors (%s) %s%n",
                paquete.getString("podio"),
                paquete.getString("nombre"),
                paquete.getLong("refactors"),
                paquete.getString("porcentaje"),
                paquete.getString("criticidad"));
        }
    }

    private void mostrarMetricasAvanzadasConsola(JSONObject metricas) {
        System.out.println("\nüìà M√âTRICAS AVANZADAS:");
        System.out.println("  ‚Ä¢ Prioridad promedio: " + 
            metricas.getJSONObject("prioridad_promedio").getString("promedio") + " - " +
            metricas.getJSONObject("prioridad_promedio").getString("estado"));
        System.out.println("  ‚Ä¢ √çndice complejidad: " + 
            metricas.getJSONObject("indice_complejidad").getString("indice") + " - " +
            metricas.getJSONObject("indice_complejidad").getString("nivel"));
    }

    private void mostrarPatronesConsola(JSONObject patrones) {
        System.out.println("\nüîç PATRONES DETECTADOS:");
        for (String key : patrones.keySet()) {
            if (patrones.get(key) instanceof JSONObject) {
                JSONObject patron = patrones.getJSONObject(key);
                if (patron.getBoolean("detectado")) {
                    System.out.println("  ‚Ä¢ " + patron.getString("emoji") + " " + patron.getString("nombre"));
                }
            }
        }
    }

    private void mostrarRecomendacionesConsola(JSONArray recomendaciones) {
        System.out.println("\nüí° RECOMENDACIONES:");
        for (int i = 0; i < recomendaciones.length(); i++) {
            System.out.println("  ‚Ä¢ " + recomendaciones.getString(i));
        }
    }

    JSONObject obtenerMetricasAvanzadas() {
        JSONObject metricas = new JSONObject();
        metricas.put("prioridad_promedio", calcularPrioridadPromedioCompleta());
        metricas.put("indice_complejidad", calcularIndiceComplejidadAvanzado());
        metricas.put("densidad_refactors", getDensidadRefactorsPorPaqueteCompleto());
        return metricas;
    }

    // üéØ GETTERS PARA ESTAD√çSTICAS
    public int getTotalCalculos() { return (Integer) cacheMetricas.get("total_calculos"); }
    public int getCacheHits() { return (Integer) cacheMetricas.get("cache_hits"); }
    public int getCacheMisses() { return (Integer) cacheMetricas.get("cache_misses"); }
    public boolean isModoVerbose() { return modoVerbose; }
}
