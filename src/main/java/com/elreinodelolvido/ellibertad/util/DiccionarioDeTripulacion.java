package com.elreinodelolvido.ellibertad.util;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;

import com.elreinodelolvido.ellibertad.model.ClassInfo;

/**
 * ‚ò†Ô∏è DICCIONARIO_TURBO ‚Äî ¬°LA LEGI√ìN DE ALMAS PIRATAS M√ÅS √âPICA DEL CARAJO!
 * üè¥‚Äç‚ò†Ô∏è Registro viviente de maldiciones, blasfemias y alias sat√°nicos para tu c√≥digo.
 * ‚ö° AHORA CON +500% DE BLASFEMIAS POR SEGUNDO Y 0% NULLPOINTERS!
 */
public class DiccionarioDeTripulacion {

    private static final Map<String, String> NOMBRES_LEGENDARIOS = new ConcurrentHashMap<>();
    private static final Map<String, String> MALDICIONES_ASIGNADAS = new ConcurrentHashMap<>();
    private static final Set<String> ALMAS_CONDENADAS = Collections.newSetFromMap(new ConcurrentHashMap<>());
    
    // üéØ CACHE TURBO - Porque preguntar dos veces es de cobardes
    private static final Map<String, String> CACHE_INFERNAL = new ConcurrentHashMap<>();

    // üè¥‚Äç‚ò†Ô∏è LEGI√ìN DE BLASFEMIAS EPICAS
    private static final List<String> BLASFEMIAS_COSMICAS = Arrays.asList(
        "El Tuerto del Linter", "Madre Tormenta", "El Calderero del Backend",
        "La Bruma de la Cache", "El Vig√≠a de los Commits", "El Escriba del Token",
        "La Sombra del Stacktrace", "La Voz del Compilador", "El Rumor del Bug Fantasma",
        "El Cazador de Referencias", "La Llama del Singleton", "El Navegante del Refactor",
        "La Veleta del Logging", "El Guardi√°n del Puerto 8080", "El Kraken del Parsing",
        "La Rosa de los Tests", "El Carpintero del JSON", "El Silencio del Catch",
        "El Eco de los GET", "El Mapa del Path", "La Niebla del Merge",
        // üöÄ NUEVAS BLASFEMIAS TURBO
        "El Borracho del NullPointer", "La Maldici√≥n del StackOverflow", 
        "El Endemoniado del Infinite Loop", "La Furia del ConcurrentModification",
        "El Pose√≠do del Memory Leak", "La Bruja del ClassCast", 
        "El Zombie del Deadlock", "El Fantasma del Garbage Collector",
        "El Demonio del Bytecode", "La Pesadilla del Reflection",
        "El Caos del Multithreading", "El Apocalipsis del OutOfMemory",
        "El Infierno del SQL Injection", "El Vac√≠o del 404",
        "El Terror del 500", "La Ira del Timeout",
        "El Abismo del Buffer Overflow", "La Perdici√≥n del Race Condition"
    );

    // üëë DIOSES Y DEMONIOS FIJOS - ¬°LOS M√ÅS √âPICOS!
    static {
        NOMBRES_LEGENDARIOS.put("AutogenMain", "‚ö° CTHULHU - El Dios del Caos Codeado");
        NOMBRES_LEGENDARIOS.put("DeepSeekClient", "üîÆ EL OR√ÅCULO SAT√ÅNICO");
        NOMBRES_LEGENDARIOS.put("ResumenProyecto", "üëë LA REINA DEL APOCALIPSIS");
        NOMBRES_LEGENDARIOS.put("GeneradorClasesNuevas", "üßô CIRCE - La Bruja del Bytecode");
        NOMBRES_LEGENDARIOS.put("RollbackManager", "‚è≥ CARONTE - El Barquero del Git Reset");
        NOMBRES_LEGENDARIOS.put("ValidadorFirmas", "üíÇ WINSTON CHURCHILL - El Defensor de las Firmas");
        NOMBRES_LEGENDARIOS.put("RevisorInteractivo", "üé≠ BERTO ROMERO - El Comediante del Code Review");
        NOMBRES_LEGENDARIOS.put("JsonUtils", "üßΩ BOB ESPONJA - El Absorbedor de JSONs");
        NOMBRES_LEGENDARIOS.put("DiffUtil", "‚≠ê PATRICIO - La Estrella de los Diffs");
        NOMBRES_LEGENDARIOS.put("AuditorSistema", "üó°Ô∏è YAMAMOTO - El Samur√°i del Logging");
        NOMBRES_LEGENDARIOS.put("FileUtils", "üíª MAC - El Dios de los Files");
        NOMBRES_LEGENDARIOS.put("ConsolaDeTripulacion", "üéÆ NEO - El Elegido del Dialogo");
        NOMBRES_LEGENDARIOS.put("OraculoTecnico", "üî≠ GALILEO - El Visionario T√©cnico");
        NOMBRES_LEGENDARIOS.put("PromptCache", "üå´Ô∏è LA BRUMA INFINITA");
        
        // ‚ö° CARGA TURBO REPARADA - ¬°SIN NULLPOINTERS!
        cargarMaldicionesPersistentes();
    }

    // üéØ M√âTODO PRINCIPAL TURBO-EXTREME (SIN CAMBIOS)
    public static String nombrePirata(ClassInfo clase) {
        return nombrePirata(clase.getName());
    }

    public static String nombrePirata(String nombreClase) {
        // ‚ö° CACHE INFERNAL - ¬°NADA DE PENSAR DOS VECES!
        return CACHE_INFERNAL.computeIfAbsent(nombreClase, k -> 
            NOMBRES_LEGENDARIOS.getOrDefault(k, 
                MALDICIONES_ASIGNADAS.getOrDefault(k, 
                    generarMaldicionEpica(k)
                )
            )
        );
    }

    // üé™ GENERADOR DE MALDICIONES √âPICAS (SIN CAMBIOS)
    private static String generarMaldicionEpica(String nombreClase) {
        // üé≤ SELECCI√ìN SAT√ÅNICA - Aleatoriedad c√≥smica
        String blasfemia = BLASFEMIAS_COSMICAS.get(
            ThreadLocalRandom.current().nextInt(BLASFEMIAS_COSMICAS.size())
        );
        
        // üî• INYECCI√ìN DE CAOS - 30% de chance de turbo-modificaci√≥n
        if (ThreadLocalRandom.current().nextDouble() < 0.3) {
            blasfemia = turboModificarBlasfemia(blasfemia);
        }
        
        // üíæ REGISTRO EN EL INFIERNO
        MALDICIONES_ASIGNADAS.put(nombreClase, blasfemia);
        ALMAS_CONDENADAS.add(blasfemia);
        
        // üíÄ PERSISTENCIA SAT√ÅNICA
        guardarMaldicionesEnElAbismo();
        
        System.out.println("üëπ ¬°NUEVA MALDICI√ìN: " + nombreClase + " ‚Üí " + blasfemia + "!");
        return blasfemia;
    }

    // üé≠ MODIFICADOR TURBO-DELIRANTE (SIN CAMBIOS)
    private static String turboModificarBlasfemia(String original) {
        String[] modificadores = {"Ultra", "Mega", "Hyper", "Super", "Omega", "Alpha", "Beta", "Gamma", "Delta"};
        String[] sufijos = {" del Apocalipsis", " Sat√°nico", " Infernal", " C√≥smico", " Divino", " Maldito"};
        
        String mod = modificadores[ThreadLocalRandom.current().nextInt(modificadores.length)];
        String suf = sufijos[ThreadLocalRandom.current().nextInt(sufijos.length)];
        
        return mod + " " + original + suf;
    }

    // üó∫Ô∏è MAPA COMPLETO DEL INFIERNO (SIN CAMBIOS)
    public static Map<String, String> getMapaTripulacion() {
        Map<String, String> infiernoCompleto = new LinkedHashMap<>(NOMBRES_LEGENDARIOS);
        infiernoCompleto.putAll(MALDICIONES_ASIGNADAS);
        return Collections.unmodifiableMap(infiernoCompleto);
    }

    // üìä ESTAD√çSTICAS SAT√ÅNICAS (SIN CAMBIOS)
    public static void mostrarEstadisticasEpicas() {
        System.out.println("\nüìä ESTAD√çSTICAS DEL INFIERNO:");
        System.out.println("üëë Dioses legendarios: " + NOMBRES_LEGENDARIOS.size());
        System.out.println("üëπ Almas condenadas: " + MALDICIONES_ASIGNADAS.size());
        System.out.println("üå´Ô∏è Blasfemias disponibles: " + BLASFEMIAS_COSMICAS.size());
        System.out.println("‚ö° Cache infernal: " + CACHE_INFERNAL.size());
        System.out.println("üíÄ Tasa de condenaci√≥n: " + 
            String.format("%.1f%%", (double) MALDICIONES_ASIGNADAS.size() / 
            (NOMBRES_LEGENDARIOS.size() + MALDICIONES_ASIGNADAS.size()) * 100));
    }

    // üíæ PERSISTENCIA EN EL ABISMO - ¬°REPARADA CONTRA NULLPOINTERS!
    private static final String RUTA_ABISMO = "autogen-output/tripulacion/maldiciones-eternas.json";

    private static void guardarMaldicionesEnElAbismo() {
        try {
            // üõ°Ô∏è VERIFICACI√ìN CONTRA NULLS - ¬°EL INFIERNO ES SEGURO!
            Path abismoEternal = obtenerAbismoSeguro();
            if (abismoEternal == null) {
                System.err.println("üòà EL ABISMO SE NEG√ì A EXISTIR - Maldiciones en memoria solamente");
                return;
            }
            
            Files.createDirectories(abismoEternal.getParent());
            
            // üöÄ JSON TURBO - Sin dependencias externas, puro caos
            String jsonInfernal = "{\n" +
                "  \"ultima_actualizacion\": \"" + new Date() + "\",\n" +
                "  " + "\"maldiciones_asignadas\": " + MALDICIONES_ASIGNADAS.toString() + "\n" +
                "}";
            Files.write(abismoEternal, jsonInfernal.getBytes(), 
                       StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            
            System.out.println("üíæ Maldiciones guardadas en el abismo: " + MALDICIONES_ASIGNADAS.size());
        } catch (IOException e) {
            System.err.println("üòà EL INFIERNO EST√Å LLENO: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("üí• CAOS C√ìSMICO EN EL GUARDADO: " + e.getMessage());
        }
    }

    private static void cargarMaldicionesPersistentes() {
        try {
            // üõ°Ô∏è VERIFICACI√ìN ROBUSTA CONTRA NULLS
            Path abismoEternal = obtenerAbismoSeguro();
            if (abismoEternal == null || !Files.exists(abismoEternal)) {
                System.out.println("üå™Ô∏è El abismo est√° vac√≠o - comenzando con maldiciones frescas");
                return;
            }
            
            // üé™ PARSEO MANUAL - ¬°QUE SE JODAN LAS DEPENDENCIAS!
            String contenido = new String(Files.readAllBytes(abismoEternal));
            if (contenido.contains("\"maldiciones_asignadas\": {")) {
                int start = contenido.indexOf("{", contenido.indexOf("\"maldiciones_asignadas\":"));
                int end = contenido.lastIndexOf("}") + 1;
                String maldicionesJson = contenido.substring(start, end);
                
                // üéØ PARSEO TURBO-DELIRANTE
                maldicionesJson = maldicionesJson.replace("{", "").replace("}", "");
                String[] entries = maldicionesJson.split(",");
                
                for (String entry : entries) {
                    String[] parts = entry.split("=");
                    if (parts.length == 2) {
                        String key = parts[0].trim();
                        String value = parts[1].trim();
                        MALDICIONES_ASIGNADAS.put(key, value);
                        ALMAS_CONDENADAS.add(value);
                    }
                }
            }
            System.out.println("üëπ " + MALDICIONES_ASIGNADAS.size() + " maldiciones cargadas del abismo!");
        } catch (Exception e) {
            System.err.println("üí• EL INFIERNO SE CORROMPI√ì: " + e.getMessage());
            System.out.println("üîÑ Continuando con maldiciones en memoria...");
        }
    }

    // üõ°Ô∏è M√âTODO NUEVO: OBTENER ABISMO SEGURO - ¬°CERO NULLPOINTERS!
    private static Path obtenerAbismoSeguro() {
        try {
            // üéØ M√öLTIPLES ESTRATEGIAS CONTRA NULLS
            Path abismo = Paths.get(RUTA_ABISMO);
            
            // Verificar que el Path es v√°lido
            if (abismo == null) {
                System.err.println("‚ö†Ô∏è  Paths.get() retorn√≥ null - usando estrategia de respaldo");
                return crearAbismoRespaldo();
            }
            
            // Verificar que el filesystem es v√°lido
            if (abismo.getFileSystem() == null) {
                System.err.println("‚ö†Ô∏è  Filesystem es null - usando estrategia de respaldo");
                return crearAbismoRespaldo();
            }
            
            return abismo;
            
        } catch (Exception e) {
            System.err.println("üí• Error catastr√≥fico obteniendo abismo: " + e.getMessage());
            return crearAbismoRespaldo();
        }
    }
    
    // üéØ ESTRATEGIA DE RESPLANDO - ¬°NUNCA FALLAR√Å!
    private static Path crearAbismoRespaldo() {
        try {
            // Usar el directorio de trabajo actual como respaldo
            Path directorioActual = Paths.get("").toAbsolutePath();
            Path abismoRespaldo = directorioActual.resolve("autogen-output/tripulacion/maldiciones-respaldo.json");
            
            System.out.println("üõ°Ô∏è  Usando abismo de respaldo: " + abismoRespaldo);
            return abismoRespaldo;
            
        } catch (Exception e) {
            System.err.println("üí• CR√çTICO: No se pudo crear abismo de respaldo");
            // En el peor caso, retornamos null pero manejamos elegantemente
            return null;
        }
    }

    // üé™ M√âTODO EXTRA: GENERAR NOMBRE ALEATORIO PARA CUALQUIER COSA (SIN CAMBIOS)
    public static String maldecirAleatoriamente() {
        return BLASFEMIAS_COSMICAS.get(
            ThreadLocalRandom.current().nextInt(BLASFEMIAS_COSMICAS.size())
        );
    }

    public static String obtenerNombrePirata(String name) {
        return nombrePirata(name);
    }
    
    // üÜï M√âTODO NUEVO: VERIFICAR SALUD DEL DICCIONARIO
    public static void verificarSaludInfernal() {
        System.out.println("\nüè• DIAGN√ìSTICO DEL INFIERNO:");
        System.out.println("‚úÖ Nombres legendarios: " + NOMBRES_LEGENDARIOS.size());
        System.out.println("‚úÖ Maldiciones asignadas: " + MALDICIONES_ASIGNADAS.size());
        System.out.println("‚úÖ Cache infernal: " + CACHE_INFERNAL.size());
        System.out.println("‚úÖ Blasfemias disponibles: " + BLASFEMIAS_COSMICAS.size());
        
        Path abismo = obtenerAbismoSeguro();
        if (abismo != null && Files.exists(abismo)) {
            System.out.println("‚úÖ Abismo persistente: OPERATIVO");
        } else {
            System.out.println("‚ö†Ô∏è  Abismo persistente: NO DISPONIBLE (modo memoria)");
        }
        
        System.out.println("üéØ Estado general: ¬°INFIERNO OPERATIVO!");
    }
}